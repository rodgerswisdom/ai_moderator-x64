Backend Tasks (Node.js, Express, MongoDB, Gemini API)
1. Project Setup

✅ Set up Node.js and Express server
✅ Install required dependencies (express, mongoose, cors, jsonwebtoken, dotenv, etc.)
✅ Configure environment variables (.env for MongoDB URI, JWT secret, API keys)
✅ Connect MongoDB using Mongoose
2. Authentication & User Management

✅ Implement JWT-based authentication (sign-up, login)
✅ Set up role-based authentication (Student, Educator)
✅ Create authentication middleware for protected routes
3. Database Schema & Models

✅ Define User model (name, email, password, role, major, workspace)
✅ Define Workspace model (name, educatorId, studentIds)
✅ Define Assignment model (title, description, workspaceId, due date)
✅ Define Submission model (studentId, assignmentId, AI usage score, flagged status, grade)
✅ Define Review model (comment, upvotes, reviewerId, assignmentId)
✅ Define AI Moderation Rules model (educatorId, max AI usage allowed, restricted topics)
4. API Endpoints Development

✅ Auth Routes: (/api/auth)

    POST /signup – Register user
    POST /login – Authenticate user
    GET /profile – Fetch user profile

✅ Workspace Routes: (/api/workspaces)

    POST /create – Educators create workspaces
    GET /:id – Fetch workspace details

✅ Assignment Routes: (/api/assignments)

    POST /create – Educators create assignments
    GET /workspace/:id – Fetch assignments for a workspace

✅ Submission Routes: (/api/submissions)

    POST /submit – Students submit assignments
    GET /:id – Fetch submission details
    PUT /:id/revise – Resubmit flagged assignments

✅ Review Routes: (/api/reviews)

    POST /:assignmentId – Students add peer reviews
    GET /:assignmentId – Fetch all reviews for an assignment
    PUT /:reviewId/upvote – Upvote a comment

✅ AI Moderation Routes: (/api/ai)

    POST /moderate – Educators define AI moderation rules
    POST /check – Analyze student submission for AI dependency using Gemini API

5. AI Integration (Gemini API)

✅ Implement AI moderation to check assignment completion level
✅ Define moderation parameters to prevent AI from generating full answers
✅ Implement AI response filtering based on educator rules
6. Flagging & Submission Validation

✅ Implement AI-overuse detection & flagging system
✅ Allow students to revise flagged assignments before final submission
7. Grading & Analytics

✅ Allow educators to manually grade submissions
✅ Implement analytics for tracking student engagement & AI reliance
Frontend Tasks (React.js + Tailwind CSS)
1. Project Setup

✅ Initialize React project using Vite
✅ Install dependencies (react-router-dom, axios, redux, tailwindcss)
✅ Configure Tailwind for styling
2. Authentication & Routing

✅ Implement login and sign-up pages
✅ Set up role-based routing (Student & Educator dashboards)
3. Student Dashboard

✅ Show list of assigned workspaces
✅ Display assignments for selected workspace
✅ AI-assisted chat (limited help, no direct answers)
✅ Implement rich-text editor for completing assignments
✅ Show peer comments & allow upvoting
4. Assignment Submission

✅ Submit assignments through rich-text editor
✅ Show AI-reliance warning if flagged
✅ Allow students to revise before final submission
5. Peer Review System

✅ Show assignment reviews
✅ Allow commenting & upvoting comments
6. Educator Dashboard

✅ Create & manage workspaces
✅ Create & manage assignments
✅ Define AI moderation rules (toggle settings)
✅ View & grade submissions
✅ View flagged assignments
✅ Access student performance analytics
7. UI Enhancements & Finalization

✅ Implement responsive design with Tailwind
✅ Add loading states & error handling
✅ Optimize API calls with caching for efficiency
